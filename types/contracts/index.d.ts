/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface BitPackingERC20Contract
  extends Truffle.Contract<BitPackingERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BitPackingERC20Instance>;
}

export interface BitPackingHodlContract
  extends Truffle.Contract<BitPackingHodlInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BitPackingHodlInstance>;
}

export interface BoostableContract extends Truffle.Contract<BoostableInstance> {
  "new"(
    optIn: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<BoostableInstance>;
}

export interface BoostableERC20Contract
  extends Truffle.Contract<BoostableERC20Instance> {
  "new"(
    optIn: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<BoostableERC20Instance>;
}

export interface BoostableHodlContract
  extends Truffle.Contract<BoostableHodlInstance> {
  "new"(
    optIn: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<BoostableHodlInstance>;
}

export interface DubiContract extends Truffle.Contract<DubiInstance> {
  "new"(
    initialSupply: number | BigNumber | string,
    optIn: string | BigNumber,
    purpose: string | BigNumber,
    hodl: string | BigNumber,
    externalAddress1: string | BigNumber,
    externalAddress2: string | BigNumber,
    externalAddress3: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<DubiInstance>;
}

export interface DummyBoostableContract
  extends Truffle.Contract<DummyBoostableInstance> {
  "new"(
    optIn: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<DummyBoostableInstance>;
}

export interface DummyERC20Contract
  extends Truffle.Contract<DummyERC20Instance> {
  "new"(
    name: string,
    symbol: string,
    initialHolder: string | BigNumber,
    initialSupply: number | BigNumber | string,
    optIn: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<DummyERC20Instance>;
}

export interface EIP712BoostableContract
  extends Truffle.Contract<EIP712BoostableInstance> {
  "new"(
    optIn: string | BigNumber,
    domainSeparator: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<EIP712BoostableInstance>;
}

export interface ERC20Contract extends Truffle.Contract<ERC20Instance> {
  "new"(
    name: string,
    symbol: string,
    optIn: string | BigNumber,
    hodl: string | BigNumber,
    externalAddress1: string | BigNumber,
    externalAddress2: string | BigNumber,
    externalAddress3: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<ERC20Instance>;
}

export interface HodlContract extends Truffle.Contract<HodlInstance> {
  "new"(
    optIn: string | BigNumber,
    prps: string | BigNumber,
    dubi: string | BigNumber,
    externalAddress1: string | BigNumber,
    externalAddress2: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<HodlInstance>;
}

export interface IBoostableERC20Contract
  extends Truffle.Contract<IBoostableERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IBoostableERC20Instance>;
}

export interface IERC1820RegistryContract
  extends Truffle.Contract<IERC1820RegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC1820RegistryInstance>;
}

export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
}

export interface IHodlContract extends Truffle.Contract<IHodlInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IHodlInstance>;
}

export interface IOptInContract extends Truffle.Contract<IOptInInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IOptInInstance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface MintMathContract extends Truffle.Contract<MintMathInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MintMathInstance>;
}

export interface OptInContract extends Truffle.Contract<OptInInstance> {
  "new"(
    defaultOptInAddress: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<OptInInstance>;
}

export interface OwnableContract extends Truffle.Contract<OwnableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OwnableInstance>;
}

export interface ProtectedBoostableContract
  extends Truffle.Contract<ProtectedBoostableInstance> {
  "new"(
    optIn: string | BigNumber,
    domainSeparator: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<ProtectedBoostableInstance>;
}

export interface ProtectedBoostableLibContract
  extends Truffle.Contract<ProtectedBoostableLibInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ProtectedBoostableLibInstance>;
}

export interface PurposeContract extends Truffle.Contract<PurposeInstance> {
  "new"(
    initialSupply: number | BigNumber | string,
    optIn: string | BigNumber,
    dubi: string | BigNumber,
    hodl: string | BigNumber,
    externalAddress1: string | BigNumber,
    externalAddress2: string | BigNumber,
    externalAddress3: string | BigNumber,
    meta?: Truffle.TransactionDetails
  ): Promise<PurposeInstance>;
}

export interface BitPackingERC20Instance extends Truffle.ContractInstance {
  allowance(
    holder: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    tokenHolder: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  boostedBurn: {
    (
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedBurnBatch: {
    (
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSend: {
    (
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSendBatch: {
    (
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedTransferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFuel: {
    (
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizePendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  revertPendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  testPackUnpackedData(txDetails?: Truffle.TransactionDetails): Promise<void>;

  testUnpackPackedData(txDetails?: Truffle.TransactionDetails): Promise<void>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unpackedDataOf(
    tokenHolder: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ balance: BigNumber; hodlBalance: BigNumber; nonce: BigNumber }>;
}

export interface BitPackingHodlInstance extends Truffle.ContractInstance {
  testPackUnpackedData(txDetails?: Truffle.TransactionDetails): Promise<void>;

  testUnpackPackedData(txDetails?: Truffle.TransactionDetails): Promise<void>;
}

export interface BoostableInstance extends Truffle.ContractInstance {
  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;
}

export interface BoostableERC20Instance extends Truffle.ContractInstance {
  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;
}

export interface BoostableHodlInstance extends Truffle.ContractInstance {
  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;
}

export interface DubiInstance extends Truffle.ContractInstance {
  allowance(
    holder: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    tokenHolder: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  boostedBurn: {
    (
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedBurnBatch: {
    (
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSend: {
    (
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSendBatch: {
    (
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedTransferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFuel: {
    (
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizePendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  hodlMint: {
    (
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  purposeMint: {
    (
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  revertPendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unpackedDataOf(
    tokenHolder: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ balance: BigNumber; hodlBalance: BigNumber; nonce: BigNumber }>;
}

export interface DummyBoostableInstance extends Truffle.ContractInstance {
  NAME(txDetails?: Truffle.TransactionDetails): Promise<string>;

  SYMBOL(txDetails?: Truffle.TransactionDetails): Promise<string>;

  addHasherContract: {
    (
      hasher: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      hasher: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hasher: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hasher: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  assertCanFinalize: {
    (
      account: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  assertCanRevert: {
    (
      account: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createOpHandle: {
    (
      account: string | BigNumber,
      opType: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      opType: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      opType: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      opType: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  deleteOpHandle: {
    (
      account: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  nextOpId: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  verifyBoost: {
    (
      from: string | BigNumber,
      a: string,
      b: string,
      payload: {
        booster: string | BigNumber;
        timestamp: number | BigNumber | string;
        nonce: number | BigNumber | string;
        isLegacySignature: boolean;
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      a: string,
      b: string,
      payload: {
        booster: string | BigNumber;
        timestamp: number | BigNumber | string;
        nonce: number | BigNumber | string;
        isLegacySignature: boolean;
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      a: string,
      b: string,
      payload: {
        booster: string | BigNumber;
        timestamp: number | BigNumber | string;
        nonce: number | BigNumber | string;
        isLegacySignature: boolean;
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      a: string,
      b: string,
      payload: {
        booster: string | BigNumber;
        timestamp: number | BigNumber | string;
        nonce: number | BigNumber | string;
        isLegacySignature: boolean;
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  verifyBoostWithoutNonce(
    from: string | BigNumber,
    a: string,
    b: string,
    payload: {
      booster: string | BigNumber;
      timestamp: number | BigNumber | string;
      nonce: number | BigNumber | string;
      isLegacySignature: boolean;
    },
    signature: {
      r: string | BigNumber;
      s: string | BigNumber;
      v: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<void>;
}

export interface DummyERC20Instance extends Truffle.ContractInstance {
  allowance(
    holder: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveInternal: {
    (
      owner: string | BigNumber,
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      owner: string | BigNumber,
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BigNumber,
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BigNumber,
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    tokenHolder: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  boostedBurn: {
    (
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedBurnBatch: {
    (
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSend: {
    (
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSendBatch: {
    (
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedTransferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFuel: {
    (
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizePendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  revertPendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferInternal: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unpackedDataOf(
    tokenHolder: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ balance: BigNumber; hodlBalance: BigNumber; nonce: BigNumber }>;
}

export interface EIP712BoostableInstance extends Truffle.ContractInstance {
  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface ERC20Instance extends Truffle.ContractInstance {
  allowance(
    holder: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    tokenHolder: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  boostedBurn: {
    (
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedBurnBatch: {
    (
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSend: {
    (
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSendBatch: {
    (
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedTransferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFuel: {
    (
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizePendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  revertPendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unpackedDataOf(
    tokenHolder: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ balance: BigNumber; hodlBalance: BigNumber; nonce: BigNumber }>;
}

export interface HodlInstance extends Truffle.ContractInstance {
  boostedHodl: {
    (
      message: {
        tag: number | BigNumber | string;
        hodlId: number | BigNumber | string;
        amountPrps: number | BigNumber | string;
        duration: number | BigNumber | string;
        dubiBeneficiary: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        creator: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      message: {
        tag: number | BigNumber | string;
        hodlId: number | BigNumber | string;
        amountPrps: number | BigNumber | string;
        duration: number | BigNumber | string;
        dubiBeneficiary: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        creator: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      message: {
        tag: number | BigNumber | string;
        hodlId: number | BigNumber | string;
        amountPrps: number | BigNumber | string;
        duration: number | BigNumber | string;
        dubiBeneficiary: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        creator: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: {
        tag: number | BigNumber | string;
        hodlId: number | BigNumber | string;
        amountPrps: number | BigNumber | string;
        duration: number | BigNumber | string;
        dubiBeneficiary: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        creator: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedHodlBatch: {
    (
      hodls: {
        tag: number | BigNumber | string;
        hodlId: number | BigNumber | string;
        amountPrps: number | BigNumber | string;
        duration: number | BigNumber | string;
        dubiBeneficiary: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        creator: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      hodls: {
        tag: number | BigNumber | string;
        hodlId: number | BigNumber | string;
        amountPrps: number | BigNumber | string;
        duration: number | BigNumber | string;
        dubiBeneficiary: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        creator: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hodls: {
        tag: number | BigNumber | string;
        hodlId: number | BigNumber | string;
        amountPrps: number | BigNumber | string;
        duration: number | BigNumber | string;
        dubiBeneficiary: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        creator: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hodls: {
        tag: number | BigNumber | string;
        hodlId: number | BigNumber | string;
        amountPrps: number | BigNumber | string;
        duration: number | BigNumber | string;
        dubiBeneficiary: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        creator: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedRelease: {
    (
      message: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      message: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      message: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedReleaseBatch: {
    (
      messages: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      messages: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messages: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messages: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedWithdraw: {
    (
      message: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      message: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      message: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedWithdrawBatch: {
    (
      messages: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      messages: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messages: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messages: {
        tag: number | BigNumber | string;
        id: number | BigNumber | string;
        creator: string | BigNumber;
        prpsBeneficiary: string | BigNumber;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnLockedPrps: {
    (
      from: string | BigNumber,
      amount: number | BigNumber | string,
      dubiMintTimestamp: number | BigNumber | string,
      burnPendingLockedPrps: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      amount: number | BigNumber | string,
      dubiMintTimestamp: number | BigNumber | string,
      burnPendingLockedPrps: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      from: string | BigNumber,
      amount: number | BigNumber | string,
      dubiMintTimestamp: number | BigNumber | string,
      burnPendingLockedPrps: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      amount: number | BigNumber | string,
      dubiMintTimestamp: number | BigNumber | string,
      burnPendingLockedPrps: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  finalizePendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getHodl(
    id: number | BigNumber | string,
    prpsBeneficiary: string | BigNumber,
    creator: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    id: BigNumber;
    duration: BigNumber;
    flags: {
      hasDifferentCreator: boolean;
      hasDifferentDubiBeneficiary: boolean;
      hasDependentHodlOp: boolean;
      hasPendingLockedPrps: boolean;
    };
    lastWithdrawal: BigNumber;
    lockedPrps: BigNumber;
    burnedLockedPrps: BigNumber;
    creator: string;
    dubiBeneficiary: string;
    pendingLockedPrps: BigNumber;
  }>;

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  hodl: {
    (
      hodlId: number | BigNumber | string,
      amountPrps: number | BigNumber | string,
      duration: number | BigNumber | string,
      dubiBeneficiary: string | BigNumber,
      prpsBeneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      hodlId: number | BigNumber | string,
      amountPrps: number | BigNumber | string,
      duration: number | BigNumber | string,
      dubiBeneficiary: string | BigNumber,
      prpsBeneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hodlId: number | BigNumber | string,
      amountPrps: number | BigNumber | string,
      duration: number | BigNumber | string,
      dubiBeneficiary: string | BigNumber,
      prpsBeneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hodlId: number | BigNumber | string,
      amountPrps: number | BigNumber | string,
      duration: number | BigNumber | string,
      dubiBeneficiary: string | BigNumber,
      prpsBeneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  migrateHodls: {
    (
      hodlIds: (number | BigNumber | string)[],
      creators: (string | BigNumber)[],
      hodlBalances: (number | BigNumber | string)[],
      durations: (number | BigNumber | string)[],
      createdAts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      hodlIds: (number | BigNumber | string)[],
      creators: (string | BigNumber)[],
      hodlBalances: (number | BigNumber | string)[],
      durations: (number | BigNumber | string)[],
      createdAts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hodlIds: (number | BigNumber | string)[],
      creators: (string | BigNumber)[],
      hodlBalances: (number | BigNumber | string)[],
      durations: (number | BigNumber | string)[],
      createdAts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hodlIds: (number | BigNumber | string)[],
      creators: (string | BigNumber)[],
      hodlBalances: (number | BigNumber | string)[],
      durations: (number | BigNumber | string)[],
      createdAts: (number | BigNumber | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  release: {
    (
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  revertLockedPrpsSetToPending: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revertPendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  setLockedPrpsToPending: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IBoostableERC20Instance extends Truffle.ContractInstance {
  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  boostedTransferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFuel: {
    (
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC1820RegistryInstance extends Truffle.ContractInstance {
  getInterfaceImplementer(
    account: string | BigNumber,
    interfaceHash: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getManager(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  implementsERC165Interface(
    account: string | BigNumber,
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  implementsERC165InterfaceNoCache(
    account: string | BigNumber,
    interfaceId: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  interfaceHash(
    interfaceName: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setInterfaceImplementer: {
    (
      account: string | BigNumber,
      interfaceHash: string | BigNumber,
      implementer: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      interfaceHash: string | BigNumber,
      implementer: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      interfaceHash: string | BigNumber,
      implementer: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      interfaceHash: string | BigNumber,
      implementer: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setManager: {
    (
      account: string | BigNumber,
      newManager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      newManager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      newManager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      newManager: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  updateERC165Cache: {
    (
      account: string | BigNumber,
      interfaceId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      interfaceId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      interfaceId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      interfaceId: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC20Instance extends Truffle.ContractInstance {
  allowance(
    owner: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IHodlInstance extends Truffle.ContractInstance {
  burnLockedPrps: {
    (
      from: string | BigNumber,
      amount: number | BigNumber | string,
      dubiMintTimestamp: number | BigNumber | string,
      burnPendingLockedPrps: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      amount: number | BigNumber | string,
      dubiMintTimestamp: number | BigNumber | string,
      burnPendingLockedPrps: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BigNumber>;
    sendTransaction(
      from: string | BigNumber,
      amount: number | BigNumber | string,
      dubiMintTimestamp: number | BigNumber | string,
      burnPendingLockedPrps: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      amount: number | BigNumber | string,
      dubiMintTimestamp: number | BigNumber | string,
      burnPendingLockedPrps: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  hodl: {
    (
      id: number | BigNumber | string,
      amountPrps: number | BigNumber | string,
      duration: number | BigNumber | string,
      dubiBeneficiary: string | BigNumber,
      prpsBeneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      id: number | BigNumber | string,
      amountPrps: number | BigNumber | string,
      duration: number | BigNumber | string,
      dubiBeneficiary: string | BigNumber,
      prpsBeneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BigNumber | string,
      amountPrps: number | BigNumber | string,
      duration: number | BigNumber | string,
      dubiBeneficiary: string | BigNumber,
      prpsBeneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      amountPrps: number | BigNumber | string,
      duration: number | BigNumber | string,
      dubiBeneficiary: string | BigNumber,
      prpsBeneficiary: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  release: {
    (
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revertLockedPrpsSetToPending: {
    (
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setLockedPrpsToPending: {
    (
      from: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdraw: {
    (
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      id: number | BigNumber | string,
      prpsBeneficiary: string | BigNumber,
      creator: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IOptInInstance extends Truffle.ContractInstance {
  getOptInStatus(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    isOptedIn: boolean;
    permaBoostActive: boolean;
    optedInTo: string;
    optOutPeriod: BigNumber;
  }>;

  getOptInStatusPair(
    accountA: string | BigNumber,
    accountB: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      {
        isOptedIn: boolean;
        permaBoostActive: boolean;
        optedInTo: string;
        optOutPeriod: BigNumber;
      },
      {
        isOptedIn: boolean;
        permaBoostActive: boolean;
        optedInTo: string;
        optOutPeriod: BigNumber;
      }
    ]
  >;

  isOptedInBy(
    _sender: string | BigNumber,
    _account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, BigNumber]>;
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface MintMathInstance extends Truffle.ContractInstance {
  MAX_FINITE_LOCK_DURATION_DAYS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  MAX_FINITE_LOCK_DURATION_SECONDS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  SECONDS_PER_MONTH(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface OptInInstance extends Truffle.ContractInstance {
  activateAndRenounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getOptInStatus(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    isOptedIn: boolean;
    permaBoostActive: boolean;
    optedInTo: string;
    optOutPeriod: BigNumber;
  }>;

  getOptInStatusPair(
    accountA: string | BigNumber,
    accountB: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      {
        isOptedIn: boolean;
        permaBoostActive: boolean;
        optedInTo: string;
        optOutPeriod: BigNumber;
      },
      {
        isOptedIn: boolean;
        permaBoostActive: boolean;
        optedInTo: string;
        optOutPeriod: BigNumber;
      }
    ]
  >;

  getOptOutPeriod(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  getOptedInAddressOf(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getPendingOptOutRemaining(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getPermaBoostActive(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  instantOptOut: {
    (
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOptedInBy(
    _sender: string | BigNumber,
    _account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, BigNumber]>;

  optIn: {
    (to: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      to: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  optOut: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface OwnableInstance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ProtectedBoostableInstance extends Truffle.ContractInstance {
  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;
}

export interface ProtectedBoostableLibInstance
  extends Truffle.ContractInstance {
  assertCanFinalize(
    metadata: {
      opType: number | BigNumber | string;
      createdAt: number | BigNumber | string;
      booster: string | BigNumber;
    },
    optInStatus: {
      isOptedIn: boolean;
      permaBoostActive: boolean;
      optedInTo: string | BigNumber;
      optOutPeriod: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface PurposeInstance extends Truffle.ContractInstance {
  allowance(
    holder: string | BigNumber,
    spender: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  approve: {
    (
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      value: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  assertFinalizeFIFOShared: {
    (
      user: string | BigNumber,
      opId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      user: string | BigNumber,
      opId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  assertRevertLIFOShared: {
    (
      user: string | BigNumber,
      opId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      user: string | BigNumber,
      opId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opId: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    tokenHolder: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  boostedBurn: {
    (
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      message: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedBurnBatch: {
    (
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      burns: {
        tag: number | BigNumber | string;
        account: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSend: {
    (
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      send: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      },
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedSendBatch: {
    (
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sends: {
        tag: number | BigNumber | string;
        sender: string | BigNumber;
        recipient: string | BigNumber;
        amount: number | BigNumber | string;
        data: string;
        fuel: {
          dubi: number | BigNumber | string;
          unlockedPrps: number | BigNumber | string;
          lockedPrps: number | BigNumber | string;
          intrinsicFuel: number | BigNumber | string;
        };
        boosterPayload: {
          booster: string | BigNumber;
          timestamp: number | BigNumber | string;
          nonce: number | BigNumber | string;
          isLegacySignature: boolean;
        };
      }[],
      signatures: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  boostedTransferFrom: {
    (
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BigNumber | string,
      data: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFuel: {
    (
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      fuel: {
        tokenAlias: number | BigNumber | string;
        amount: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createNewOpHandleShared: {
    (
      optInStatus: {
        isOptedIn: boolean;
        permaBoostActive: boolean;
        optedInTo: string | BigNumber;
        optOutPeriod: number | BigNumber | string;
      },
      user: string | BigNumber,
      opType: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      optInStatus: {
        isOptedIn: boolean;
        permaBoostActive: boolean;
        optedInTo: string | BigNumber;
        optOutPeriod: number | BigNumber | string;
      },
      user: string | BigNumber,
      opType: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ opType: BigNumber; opId: BigNumber }>;
    sendTransaction(
      optInStatus: {
        isOptedIn: boolean;
        permaBoostActive: boolean;
        optedInTo: string | BigNumber;
        optOutPeriod: number | BigNumber | string;
      },
      user: string | BigNumber,
      opType: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      optInStatus: {
        isOptedIn: boolean;
        permaBoostActive: boolean;
        optedInTo: string | BigNumber;
        optOutPeriod: number | BigNumber | string;
      },
      user: string | BigNumber,
      opType: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  decodeAndHashBoosterMessage(
    targetBooster: string | BigNumber,
    boosterMessage: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BigNumber]>;

  decreaseAllowance: {
    (
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      subtractedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseHodlBalance: {
    (
      from: string | BigNumber,
      hodlAmount: number | BigNumber | string,
      refundAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      hodlAmount: number | BigNumber | string,
      refundAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      hodlAmount: number | BigNumber | string,
      refundAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      hodlAmount: number | BigNumber | string,
      refundAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deleteOpHandleShared: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  finalizePendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getNonce(
    account: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  getOpCounter(
    user: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    value: BigNumber;
    nextFinalize: BigNumber;
    nextRevert: BigNumber;
  }>;

  getOpMetadata(
    user: string | BigNumber,
    opId: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  hodl(txDetails?: Truffle.TransactionDetails): Promise<string>;

  hodlBalanceOf(
    tokenHolder: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  hodlTransfer: {
    (
      from: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BigNumber,
      addedValue: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseHodlBalance: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  migrateHodlBalance: {
    (
      account: string | BigNumber,
      hodlAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BigNumber,
      hodlAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BigNumber,
      hodlAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BigNumber,
      hodlAmount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  revertHodlBalance: {
    (
      from: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BigNumber,
      to: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revertPendingOp: {
    (
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      user: string | BigNumber,
      opHandle: {
        opType: number | BigNumber | string;
        opId: number | BigNumber | string;
      },
      boosterMessage: string,
      signature: {
        r: string | BigNumber;
        s: string | BigNumber;
        v: number | BigNumber | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  safeGetOpMetadata(
    user: string | BigNumber,
    opHandle: {
      opType: number | BigNumber | string;
      opId: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ opType: BigNumber; createdAt: BigNumber; booster: string }>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  transfer: {
    (
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      holder: string | BigNumber,
      recipient: string | BigNumber,
      amount: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferOwnership: {
    (
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string | BigNumber,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unpackedDataOf(
    tokenHolder: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ balance: BigNumber; hodlBalance: BigNumber; nonce: BigNumber }>;
}
